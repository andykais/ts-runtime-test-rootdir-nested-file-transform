"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lib_1 = require("ts-runtime/lib");
lib_1.default.declare("Console.1403622378", lib_1.default.type("Console", function (Console) { return lib_1.default.object(lib_1.default.property("memory", lib_1.default.any()), lib_1.default.property("Console", lib_1.default.nullable(lib_1.default.ref(NodeJS.ConsoleConstructor))), lib_1.default.property("assert", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("condition", lib_1.default.nullable(lib_1.default.union(lib_1.default.nullable(lib_1.default.boolean()), lib_1.default.any())), true), lib_1.default.param("message", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.param("data", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("clear", lib_1.default.nullable(lib_1.default.function(lib_1.default.return(lib_1.default.void())))), lib_1.default.property("count", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("debug", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("dir", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("value", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.union(lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), lib_1.default.nullable(lib_1.default.ref(NodeJS.InspectOptions)))), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("dirxml", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("value", lib_1.default.nullable(lib_1.default.union(lib_1.default.any(), lib_1.default.nullable(lib_1.default.array(lib_1.default.any())))), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("error", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("exception", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("group", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("groupTitle", lib_1.default.nullable(lib_1.default.union(lib_1.default.nullable(lib_1.default.string()), lib_1.default.nullable(lib_1.default.array(lib_1.default.any())))), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("groupCollapsed", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("groupTitle", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("groupEnd", lib_1.default.nullable(lib_1.default.function(lib_1.default.return(lib_1.default.void())))), lib_1.default.property("info", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("log", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("markTimeline", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("profile", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("reportName", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("profileEnd", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("reportName", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("table", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("tabularData", lib_1.default.nullable(lib_1.default.union(lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), lib_1.default.any())), true), lib_1.default.param("properties", lib_1.default.nullable(lib_1.default.array(lib_1.default.nullable(lib_1.default.string()))), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("time", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("timeEnd", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("timeStamp", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("timeline", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("timelineEnd", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("trace", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("warn", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("message", lib_1.default.any(), true), lib_1.default.param("optionalParams", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("countReset", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.return(lib_1.default.void())))), lib_1.default.property("timeLog", lib_1.default.nullable(lib_1.default.function(lib_1.default.param("label", lib_1.default.nullable(lib_1.default.string()), true), lib_1.default.param("data", lib_1.default.nullable(lib_1.default.array(lib_1.default.any())), true), lib_1.default.return(lib_1.default.void()))))); }));
